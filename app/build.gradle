apply plugin: 'com.android.application'

/***************************************aspectj***************************************/
// 编译脚本，这里配置的东西是给gradle用的
buildscript {
    // 仓库
    repositories {
        // 从maven取得依赖组件
        mavenCentral()
    }
    // 依赖
    dependencies {
        // 使用AspectJ的编译器
        classpath 'org.aspectj:aspectjtools:1.9.1'
        // 尝试发现，不引入aspectjweaver也可以
        // classpath 'org.aspectj:aspectjweaver:1.9.1'
    }
}
/***************************************aspectj***************************************/

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.example.fj.aop"
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

/***************************************aspectj***************************************/
import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

// project代表当前这个文件，logger是日志组件
final def log = project.logger
// 变体
final def variants = project.android.applicationVariants
// 遍历变体
variants.all {
    variant ->
        if (!variant.buildType.isDebuggable()) {
            log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
            return
        }
        // 拿到Java编译任务
        JavaCompile javaCompile = variant.javaCompile
        // 在Java编译之后执行
        javaCompile.doLast {
            // 录入参数
            String[] args = ["-showWeaveInfo",
                             // 版本
                             "-1.8",
                             // 采集所有class文件的路径
                             "-inpath", javaCompile.destinationDir.toString(),
                             // AspectJ编译器的classpath
                             "-aspectpath", javaCompile.classpath.asPath,
                             // 输出目录，AspectJ处理完成后的输出目录
                             "-d", javaCompile.destinationDir.toString(),
                             // Java程序的类查找路径
                             "-classpath", javaCompile.classpath.asPath,
                             // 覆盖引导类的位置，android中使用android.jar而不是jdk
                             "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
            log.debug "ajc args: " + Arrays.toString(args)

            MessageHandler handler = new MessageHandler(true)
            new Main().run(args, handler)
            for (IMessage message : handler.getMessages(null, true)) {
                switch (message.getKind()) {
                    case IMessage.ABORT:
                    case IMessage.ERROR:
                    case IMessage.FAIL:
                        log.error message.message, message.thrown
                        break
                    case IMessage.WARNING:
                        log.warn message.message, message.thrown
                        break
                    case IMessage.INFO:
                        log.info message.message, message.thrown
                        break
                    case IMessage.DEBUG:
                        log.debug message.message, message.thrown
                        break
                }
            }
        }
}
/***************************************aspectj***************************************/

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    // aspectj
    implementation 'org.aspectj:aspectjrt:1.9.1'
}
